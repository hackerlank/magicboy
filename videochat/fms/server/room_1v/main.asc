load("conf.js");
load("netservices.asc");

function mytrace(s){
	//trace(s);
}

application.onAppStart = function(){
	NetServices.setDefaultGatewayUrl(ServerURL);
	this.so = SharedObject.get("so");
}

application.onConnect = function(client, sid, rid, vid){
	var service = application.getService("ChatService", this);
	// 获取用户身份
	this.getUserInfo_Result = function(resp){
		if(!resp.valid){
			// 无效用户
			mytrace('invalid user');
			var error = {message: 'invalid'};
			application.rejectConnection(client, error);
		}
		else{
			client.data = {sid: sid, rid: rid, vid: vid, uid: resp.uid, role: resp.role};
			//client.setBandwidthLimit(500000, 500000);
			application.acceptConnection(client);
		}
	}
	this.getUserInfo_Status = function(info){
	}
	service.getUserInfo(sid);
}

application.onDisconnect = function(client){
	if(client.data){
		mytrace(client.data.uid + ' logout');
		var msg = '';
		if(client.data.role == 1){
			var video = this.so.getProperty('video');
			if(video && video.uid == client.data.uid){
				this.so.setProperty('video', null);
			}
		}
	}
}

application.onPublish = function(client, stream){
	mytrace('pub: ' + stream.name);
	var now = new Date();
	client.data.pubtime = parseInt(now.getTime() / 1000, 10);
}

application.onUnpublish = function(client, stream){
	mytrace('unpub: ' + stream.name);
	this.so.setProperty('video', null);
	if(client.data.pubtime){
		var now = new Date();
		var total = parseInt(now.getTime()/1000, 10) - client.data.pubtime;
		var service = application.getService('ChatService', this);
		this.updateWorkTime_Result = function(resp){
		};
		this.updateWorkTime_Status = function(resp){
		};
		service.updateWorkTime(client.data.sid, client.data.pubtime, total);
		client.data.pubtime = null;
	}
}

application.getService = function(serviceName, obj){
	var conn = NetServices.createGatewayConnection();
	return conn.getService(serviceName, obj);
}
