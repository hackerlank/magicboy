load("conf.js");
load("netservices.asc");

function mytrace(s){
	//trace(s);
}

application.findUser = function(uid){
	var ret = -1;
	for(var i = 0; i < this.clients.length; i++){
		var data = this.clients[i].data;
		if(data.uid == uid){
			ret = i;
			break;
		}
	}
	return ret;
}
application.isLogined = function(uid){
	return false;
	var ret = false;
	for(var i = 0; i < this.clients.length; i++){
		var data = this.clients[i].data;
		if(data.uid == uid){
			ret = true;
			break;
		}
	}
	return ret;
}
application.getUserInfoByUid = function(uid){
	return this.users[uid] ? this.users[uid] : null;
}

application.onAppStart = function(){
	this.users = {};
	this.rid = 1;
	this.vid = 1;
	this.mockUsers = {}; // 伪装的用户
	this.so = SharedObject.get("so");
	NetServices.setDefaultGatewayUrl(ServerURL);
	
	this.initMockUsers();
}

application.initMockUsers = function(){
	var service = application.getService("ChatService", this);
	this.getMockUsers_Result = function(resp){
		this.mockUsers = resp;
		for(var i = 0; i < application.mockUsers.length; i++){
			var user = resp[i];
			application.users[user.uid] = {nick: user.nick, role: 0, logo: user.face_id};
		}
	};
	this.getMockUsers_Status = function(resp){};
	service.getMockUsers();
}

application.onAppStop = function(info){
}

application.onPublish = function(client, stream){
	mytrace('pub: ' + stream.name);
	// 主持人开摄像头时间
	var now = new Date();
	client.data.pubtime = parseInt(now.getTime()/1000, 10);
}

application.onUnpublish = function(client, stream){
	mytrace('unpub: ' + stream.name);
	this.so.setProperty('video', null);
	// 主持人关摄像头时间
	if(client.data.pubtime){
		var now = new Date();
		var total = parseInt(now.getTime()/1000, 10) - client.data.pubtime;
		var service = application.getService('ChatService', this);
		this.updateWorkTime_Result = function(resp){
		};
		this.updateWorkTime_Status = function(resp){
		};
		service.updateWorkTime(client.data.sid, client.data.pubtime, total);
		client.data.pubtime = null;
	}
}

application.onStatus = function(info){
	mytrace("code: " + info.code + " level: " + info.level);
	mytrace(info.code + " details: " + info.details);
}

application.getService = function(serviceName, obj){
	var conn = NetServices.createGatewayConnection();
	return conn.getService(serviceName, obj);
}

application.onConnect = function(client, sid, rid, vid){
	mytrace('onConnect: ' + sid + ' ' + rid + ' ' + vid);
	application.rid = rid;
	application.vid = vid;
	var service = application.getService("ChatService", this);
	// 获取用户身份
	this.getUserInfo_Result = function(resp){
		if(!resp.valid){
			// 无效用户
			mytrace('invalid user');
			var error = {message: 'invalid'};
			application.rejectConnection(client, error);
		}
		else{
			var uid = resp.uid;
			// 重复登录问题
			if(application.isLogined(uid)){
				mytrace('replogin');
				var error = {message: 'replogin'};
				application.rejectConnection(client, error);
			}
			else{
				client.data = {
					sid: sid, rid: rid, vid: vid, bd: resp.bd,
					uid: uid, nick: resp.nick, role: resp.role, logo: resp.logo, score: resp.score,
					area: resp.area, level: resp.level, sex: resp.sex, occupation: resp.occupation
				};
				// 普通用户
				if(resp.role == 0){
					// 检查人数限制
					if(application.clients.length >= resp.maxUserCount){
						mytrace('maxuser');
						var error = {message: 'maxuser'};
						application.rejectConnection(client, error);
					}
					else{
						// 检查黑名单，生成进入消息
						this.login_Result = function(loginResp){
							if(loginResp.allow){
								mytrace('user onLogin: ' + uid);
								application.doLoginOK(client, loginResp.msg);
							}
							else{
								mytrace('rejectConnection');
								var error = {message: 'black'};
								application.rejectConnection(client, error);
							}
						};
						this.login_Status = function(obj){
						};
						service.login(client.data);
					}
				}
				else{ // 主持人和管理员
					mytrace('admin onLogin: ' + uid);
					// 生成用户登录消息
					application.doLoginOK(client, '');
				}
			}
		}
	}
	this.getUserInfo_Status = function(info){
	}
	service.getUserInfo(sid);
}

application.doLoginOK = function(client, msg){
	mytrace('doLoginOK');
	application.broadcastMsg("onLogin", msg, client.data.uid, client.data.nick, client.data.role, client.data.logo, client.data.score);
	// 接受新用户登录
	/*
	if(client.data.role == 0){
		client.setBandwidthLimit(client.data.bd, client.data.bd);
	}
	*/
	application.acceptConnection(client);
	// 更新用户昵称映射表
	application.users[client.data.uid] = {nick: client.data.nick, role: client.data.role, logo: client.data.logo};
	// 读取用户礼物
	var service = application.getService('ChatService', this);
	this.getProps_Result = function(resp){
		// 回写swf用户信息
		var obj = {
			user: client.data,
			userlist: application.getUserList(),
			props: resp
		};
		client.call("onInitRoom", null, obj);
	};
	this.getProps_Status = function(resp){
	};
	service.getProps(client.data.sid);
}

application.onDisconnect = function(client){
	mytrace('onDisconnect');
	if(client.data){
		mytrace(client.data.uid + ' logout');
		var msg = '';
		if(client.data.role == 1){
			var video = this.so.getProperty('video');
			if(video && video.uid == client.data.uid){
				this.so.setProperty('video', null);
			}
		}
		application.broadcastMsg("onLogout", msg, client.data.uid, client.data.nick, client.data.role);
	}
}

application.getUserList = function(){
	var ret = [];
	for(var i = 0; i < application.clients.length; i++){
		var data = application.clients[i].data;
		ret.push(data);
	}
	for(var i = 0; i < application.mockUsers.length; i++){
		var user = application.mockUsers[i];
		var data = {
			sid: '', rid: application.rid, vid: application.vid, bd: 0,
			uid: user.uid, nick: user.nick, role: 0, logo: user.face_id, score: user.score,
			area: '', level: '', sex: '', occupation: ''
		};
		ret.push(data);
	}
	return ret;
}

application.doubleDigitFormat = function(num){
    if(num < 10) {
        return ("0" + num);
    }
    return num;
}

application.getCurrTime = function(){
	var now = new Date();
	var ret = '' + this.doubleDigitFormat(now.getHours()) + ':' + this.doubleDigitFormat(now.getMinutes()) + ':' + this.doubleDigitFormat(now.getSeconds());
	return ret;
}

Client.prototype.debug = function(s){
	mytrace('debug:' + s);
}

Client.prototype.sendMsg = function(msg, to, font, color, size){
	if(msg.length == 0) return;
	// 是否有权限
	var conn = NetServices.createGatewayConnection();
	var service = conn.getService("ChatService", this);
	this.sendMsg_Result = function(resp){
		var msg = resp.msg;
		if(resp.speak == 0){
			application.broadcastMsg("onChatMsg", msg);
		}
		else{
			mytrace(this.data.uid);
			mytrace('not allow speak: ' + msg);
			this.call("onChatMsg", null, msg);
		}
	};
	this.sendMsg_Status = function(obj){
	};
	var tonick = '';
	var torole = -1;
	var tologo = '';
	var userInfo = application.getUserInfoByUid(to);
	if(userInfo){
		tonick = userInfo.nick;
		torole = userInfo.role;
		tologo = userInfo.logo;
	}
	service.sendMsg(this.data.sid, msg, to, tonick, torole, tologo, font, color, size);
}

Client.prototype.sendGift = function(propid, count, to, propName){
	// 是否有权限
	var conn = NetServices.createGatewayConnection();
	var service = conn.getService("ChatService", this);
	this.sendGift_Result = function(resp){
		resp.content = resp.content;
		if(resp.allow){
			var fromUser = application.findUser(resp.from);
			//trace("fromUser: " + fromUser + " resp.to: " + resp.from);
			if(fromUser >= 0){
				application.clients[fromUser].data.score = resp.myscore;
			}
			var toUser = application.findUser(resp.to);
			//trace("toUser: " + toUser + " resp.to: " + resp.to);
			if(toUser >= 0){
				application.clients[toUser].data.score = resp.toscore;
			}
			application.broadcastMsg("onGiftMsg", resp);
		}
		else{
			mytrace('not allow send gift');
			this.call("onGiftMsg", null, resp);
		}
	};
	this.sendGift_Status = function(obj){
	};
	var tonick = '';
	var torole = -1;
	var tologo = '';
	var userInfo = application.getUserInfoByUid(to);
	if(userInfo){
		tonick = userInfo.nick;
		torole = userInfo.role;
		tologo = userInfo.logo;
	}
	service.sendGift(this.data.sid, propid, count, to, tonick, torole, tologo, propName);
}

Client.prototype.ban = function(banid){
	var u = application.getUserInfoByUid(banid);
	var bannick = u.nick;
	var conn = NetServices.createGatewayConnection();
	var service = conn.getService("ChatService", this);
	this.ban_Result = function(resp){
		if(resp.ret){
			var time = application.getCurrTime();
			var prefix = '['+time+'] ';
			this.call("onChatMsg", null, prefix + "【" + bannick + '】已被禁言');
			var inx = application.findUser(banid);
			if(inx >= 0){
				application.clients[inx].call("onChatMsg", null, prefix+"您已被禁言");
			}
		}
		else{
			this.call("onChatMsg", null, prefix+"禁言失败");
		}
	};
	this.ban_Status = function(obj){
	};
	service.ban(this.data.sid, banid, bannick);
}

Client.prototype.getUserList = function(){
	var ret = [];
	for(var i = 0; i < application.clients.length; i++){
		var data = application.clients[i].data;
		ret.push(data);
	}
	return ret;
}

